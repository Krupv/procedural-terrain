#include "Material.hpp"




// PUBLIC
//------------------------------------------------------------------------------


////////////////////////////////////////////////////////////////////////////////
// CONSTRUCTOR
////////////////////////////////////////////////////////////////////////////////
Material::Material(const glm::vec3& _color, const float& _texScale ) : m_color(_color), m_texScale(_texScale) 
{

}

Material::Material(const Material& _other) : m_color(_other.m_color), m_texScale(_other.m_texScale)
{
	for ( unsigned int i = 0; i < _other.m_textures.size(); i++ )
	{
		m_textures.push_back(Texture(_other.m_textures[i]));
	}
}

////////////////////////////////////////////////////////////////////////////////
// DESTRUCTOR
////////////////////////////////////////////////////////////////////////////////
Material::~Material()
{
	// for (unsigned int i = 0; i < m_textures.size(); i++)
	// 	m_textures[i];
}

////////////////////////////////////////////////////////////////////////////////
// 
////////////////////////////////////////////////////////////////////////////////
void Material::addTexture(Texture _texture)
{
	m_textures.push_back(_texture);
}


////////////////////////////////////////////////////////////////////////////////
// 
////////////////////////////////////////////////////////////////////////////////
void Material::bindTextures() const
{
	for (unsigned int i = 0; i < m_textures.size(); i++)
		m_textures[i].bind(i);
}


//PRIVATE:
//------------------------------------------------------------------------------


