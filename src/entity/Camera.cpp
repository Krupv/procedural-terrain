#include "Camera.hpp"


// PUBLIC
//------------------------------------------------------------------------------


////////////////////////////////////////////////////////////////////////////////
// CONSTRUCTOR
////////////////////////////////////////////////////////////////////////////////
Camera::Camera( float _aspect, float _fov , float _zNear , float _zFar ) :
	m_aspect(_aspect),
	m_fov(_fov),
	m_zNear(_zNear),
	m_zFar(_zFar)
{
	redoProjection();
}

////////////////////////////////////////////////////////////////////////////////
// DESTRUCTOR
////////////////////////////////////////////////////////////////////////////////
Camera::~Camera ()
{

}

////////////////////////////////////////////////////////////////////////////////
// GET VIEW PROJECTION MATRIX
////////////////////////////////////////////////////////////////////////////////
glm::mat4 Camera::getViewProjection()	const
{
	return m_projection *  getView(); 
}

////////////////////////////////////////////////////////////////////////////////
// GET PROJECTION MATRIX
////////////////////////////////////////////////////////////////////////////////
const glm::mat4& Camera::getProjection()	const
{
	return m_projection;
}

////////////////////////////////////////////////////////////////////////////////
// GET VIEW MATRIX
////////////////////////////////////////////////////////////////////////////////
glm::mat4 Camera::getView()	const
{
	return glm::inverse(getTransMat());
}

////////////////////////////////////////////////////////////////////////////////
// SET FOV
////////////////////////////////////////////////////////////////////////////////
void Camera::setFOV(float _fov)
{
	m_fov = _fov;
}

////////////////////////////////////////////////////////////////////////////////
// SET ASPECT RATIO
////////////////////////////////////////////////////////////////////////////////
void Camera::setAspect(float _aspect)
{
	m_aspect = _aspect;
}



// PRIVATE
//------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
// REDO PROJECTION MATRIX
////////////////////////////////////////////////////////////////////////////////
void Camera::redoProjection()
{
	m_projection = glm::perspective(m_fov, m_aspect, m_zNear, m_zFar);
}

////////////////////////////////////////////////////////////////////////////////
// UPDATE CAMERA
////////////////////////////////////////////////////////////////////////////////
void Camera::update(float _delta)
{

}
